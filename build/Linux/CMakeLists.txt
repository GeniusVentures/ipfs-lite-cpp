
cmake_minimum_required(VERSION 3.5.1)
# set(CMAKE_VERBOSE_MAKEFILE ON) # Un-comment this line if one run to show more details during compilation
function(print)
  message(STATUS "[${CMAKE_PROJECT_NAME}] ${ARGV}")
endfunction()

# Project
project(ipfs-lite-cpp-linux)

# --------------------------------------------------------
# Set OS threading settings
set(CMAKE_THREAD_LIBS_INIT "-lpthread")
set(CMAKE_HAVE_THREADS_LIBRARY ON)
set(CMAKE_USE_WIN32_THREADS_INIT OFF)
set(CMAKE_USE_PTHREADS_INIT ON)
set(THREADS_PREFER_PTHREAD_FLAG ON)

# --------------------------------------------------------
# Set extra compiler flags
set(EXTRA_CXX_FLAGS "-pthread")


# somehow this doesn't work on github CI/CD probably permission error - get_BOOST_version(BOOST_VERSION "${THIRDPARTY_DIR}/boost/boost/version.hpp")
set(BOOST_MAJOR_VERSION "1" CACHE STRING "Boost Major Version")
set(BOOST_MINOR_VERSION "80" CACHE STRING "Boost Minor Version")
set(BOOST_PATCH_VERSION "0" CACHE STRING "Boost Patch Version")
# convenience settings
set(BOOST_VERSION "${BOOST_MAJOR_VERSION}.${BOOST_MINOR_VERSION}.${BOOST_PATCH_VERSION}")
set(BOOST_VERSION_3U "${BOOST_MAJOR_VERSION}_${BOOST_MINOR_VERSION}_${BOOST_PATCH_VERSION}")
set(BOOST_VERSION_2U "${BOOST_MAJOR_VERSION}_${BOOST_MINOR_VERSION}")

# ------------------------------------------
# Set Linux specific runtime options
if("${LINUX_TARGET_ARCHITECTURES}" STREQUAL "")
    set(LINUX_TARGET_ARCHITECTURES "${CMAKE_HOST_SYSTEM_PROCESSOR}")
endif("${LINUX_TARGET_ARCHITECTURES}" STREQUAL "")

print("CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
set(CompilerFlags
        CMAKE_CXX_FLAGS
        CMAKE_CXX_FLAGS_DEBUG
        CMAKE_CXX_FLAGS_RELEASE
        CMAKE_C_FLAGS
        CMAKE_C_FLAGS_DEBUG
        CMAKE_C_FLAGS_RELEASE
        )
print("C flags: ${CMAKE_C_FLAGS}")
print("CXX flags: ${CMAKE_CXX_FLAGS}")
print("C Debug flags: ${CMAKE_C_FLAGS_DEBUG}")
print("CXX Debug flags: ${CMAKE_CXX_FLAGS_DEBUG}")
print("C Release flags: ${CMAKE_C_FLAGS_RELEASE}")
print("CXX Release flags: ${CMAKE_CXX_FLAGS_RELEASE}")
set(_CMAKE_COMMON_BUILD_PARAMS ${CMAKE_CACHE_ARGS_CFLAGS_ADD})


include(ExternalProject)

# Note: For all external projects, instead of using checked-out code, one could
# specify GIT_REPOSITORY and GIT_TAG to have cmake download the dependency directly,
# without needing to add a submodule to your project.

# Builds GTest project from the git submodule.
ExternalProject_Add(GTest
  PREFIX GTest
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../GTest"
  CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/GTest
)

set(_FINDPACKAGE_GTEST_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/GTest/lib/cmake/GTest")


INCLUDE(FindProtobuf)
FIND_PACKAGE(Protobuf REQUIRED)
#INCLUDE_DIRECTORIES(${PROTOBUF_INCLUDE_DIR})

# Set Protobuf library path
if (NOT DEFINED _PROTOBUF_CONFIG_DIR)
    set(_PROTOBUF_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc/lib/cmake/protobuf")
endif()
set(_FINDPACKAGE_PROTOBUF_CONFIG_DIR "${_PROTOBUF_CONFIG_DIR}")
print("PROTOBUF_CONFIG_DIR: ${_FINDPACKAGE_PROTOBUF_CONFIG_DIR}")

if (NOT DEFINED _PROTOBUF_INCLUDE_DIR)
    set(_PROTOBUF_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc/include")
endif()
set(_FINDPACKAGE_PROTOBUF_INCLUDE_DIR "${_PROTOBUF_INCLUDE_DIR}")
print("PROTOBUF_INCLUDE_DIR: ${_FINDPACKAGE_PROTOBUF_INCLUDE_DIR}")

if (NOT DEFINED _PROTOBUF_LIB_DIR)
    set(_PROTOBUF_LIB_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc/lib")
endif()
set(_FINDPACKAGE_PROTOBUF_LIB_DIR "${_PROTOBUF_LIB_DIR}")
print("PROTOBUF_LIB_DIR: ${_FINDPACKAGE_PROTOBUF_LIB_DIR}")

if (NOT DEFINED PROTOC_EXECUTABLE)
    set(PROTOC_EXECUTABLE "${CMAKE_CURRENT_BINARY_DIR}/grpc/bin/protoc${CMAKE_EXECUTABLE_SUFFIX}")
endif()
set(_PROTOBUF_PROTOC_EXEC "${PROTOC_EXECUTABLE}")
print("PROTOBUF_PROTOC_EXECUTABLE: ${_PROTOBUF_PROTOC_EXEC}")
print("CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")

# check if protobuf was found
if(PROTOBUF_FOUND)
    print("Protobuf found")
    print("Protobuf_DIR:PATH=${_PROTOBUF_CONFIG_DIR}")
    print("Protobuf_INCLUDE_DIR:PATH=${_FINDPACKAGE_PROTOBUF_INCLUDE_DIR}")
    print("Protobuf_LIBRARIES:PATH=${_FINDPACKAGE_PROTOBUF_LIB_DIR}")
else()
    message (FATAL_ERROR "Cannot find Protobuf - Need install protobuf in your build server")
endif()
# TODO: Need to link to protobuf at third_part repo

## the location where protobuf-config.cmake will be installed varies by platform
#set(_FINDPACKAGE_PROTOBUF_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/protobuf/cmake")
#set(_FINDPACKAGE_PROTOBUF_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/protobuf/include")
#set(_FINDPACKAGE_PROTOBUF_LIB_DIR "${CMAKE_CURRENT_BINARY_DIR}/protobuf/lib")

# if OPENSSL_ROOT_DIR is set, propagate that hint path to the external projects with OpenSSL dependency.
set(_CMAKE_ARGS_OPENSSL_ROOT_DIR "")
if (OPENSSL_ROOT_DIR)
  set(_CMAKE_ARGS_OPENSSL_ROOT_DIR "-DOPENSSL_ROOT_DIR:PATH=${OPENSSL_ROOT_DIR}")
endif()

# Builds rocksdb
ExternalProject_Add(rocksdb
  PREFIX rocksdb
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../rocksdb"
  CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/rocksdb
        -DROCKSDB_BUILD_SHARED:BOOL=OFF
        -DWITH_ALL_TESTS:BOOL=OFF
        -DWITH_TESTS:BOOL=OFF
        -DWITH_TOOLS:BOOL=OFF
        -DWITH_CORE_TOOLS:BOOL=OFF
        -DWITH_BENCHMARK_TOOLS:BOOL=OFF
        -DWITH_RUNTIME_DEBUG:BOOL=ON
        -DWITH_MD_LIBRARY:BOOL=OFF  
        -DROCKSDB_INSTALL_ON_WINDOWS:BOOL=ON
        -DPORTABLE:BOOL=ON
        -DWITH_GFLAGS:BOOL=OFF
        ${CMAKE_CACHE_ARGS_CFLAGES_ADD}
)
set(_FINDPACKAGE_ROCKSDB_DIR "${CMAKE_CURRENT_BINARY_DIR}/rocksdb/lib/cmake/rocksdb")

# Builds Microsoft.GSL
ExternalProject_Add(Microsoft.GSL
  PREFIX Microsoft.GSL
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../GSL"
  CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/GSL
        -DGSL_TEST:BOOL=OFF
)
set(_FINDPACKAGE_GSL_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/GSL/include")

ExternalProject_Add(fmt
  PREFIX fmt
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../fmt"
  CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/fmt
        ${_CMAKE_COMMON_BUILD_PARAMS}
        -DFORCE_MULTILE:BOOL=${_FORCE_MULTILE}
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DFMT_TEST:BOOL=OFF
)

set(_FINDPACKAGE_FMT_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/fmt/lib/cmake/fmt")
set(_FINDPACKAGE_FMT_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/fmt/lib")
set(_FINDPACKAGE_FMT_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/fmt/include")
print("_FINDPACKAGE_FMT_CONFIG_DIR: ${_FINDPACKAGE_FMT_CONFIG_DIR}")
print("CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")


# Builds spdlog
ExternalProject_Add(spdlog
  PREFIX spdlog
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../spdlog"
  CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/spdlog
        -DSPDLOG_BUILD_EXAMPLE:BOOL=OFF
        -DSPDLOG_FMT_EXTERNAL:BOOL=ON
        -Dfmt_DIR:PATH=${_FINDPACKAGE_FMT_CONFIG_DIR}
  DEPENDS fmt
)
set(_FINDPACKAGE_SPDLOG_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/spdlog/lib/spdlog/cmake")
set(_FINDPACKAGE_SPDLOG_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/spdlog/include")
print("_FINDPACKAGE_SPDLOG_CONFIG_DIR: ${_FINDPACKAGE_SPDLOG_CONFIG_DIR}")
print("_FINDPACKAGE_SPDLOG_INCLUDE_DIR: ${_FINDPACKAGE_SPDLOG_INCLUDE_DIR}")

# Builds tsl_hat_trie 343e0dac54fc8491065e8a059a02db9a2b1248ab
ExternalProject_Add(tsl_hat_trie
  PREFIX tsl_hat_trie
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../hat-trie"
  CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/hat-trie
)
set(_FINDPACKAGE_TSL_HAT_TRIE_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/hat-trie/lib/cmake/tsl_hat_trie")
set(_FINDPACKAGE_TSL_HAT_TRIE_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/hat-trie/include")

# Builds Boost.DI c5287ee710ad90f5286d0cc2b9e49b72d89267a6
ExternalProject_Add(Boost.DI
  PREFIX Boost.DI
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../Boost.DI"
  CMAKE_CACHE_ARGS
        -DBOOST_DI_OPT_BUILD_TESTS:BOOL=OFF
        -DBOOST_DI_OPT_BUILD_EXAMPLES:BOOL=OFF
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/Boost.DI
)
set(_FINDPACKAGE_BOOST_DI_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/Boost.DI/lib/cmake/Boost.DI")
set(_FINDPACKAGE_BOOST_DI_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/Boost.DI/include")



## BOOST library
set(_BOOST_BUILD_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/../../../boost/build/${CMAKE_SYSTEM_NAME}")
set(Boost_NO_SYSTEM_PATHS  ON)
set(Boost_USE_STATIC_LIBS  ON)
set(Boost_USE_STATIC_RUNTIME ON)
if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(BOOST_VARIANT "debug")
else()
    set(BOOST_VARIANT "release")
endif(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
ExternalProject_Add(Boost
    PREFIX boost
    SOURCE_DIR    "${CMAKE_CURRENT_SOURCE_DIR}/../../../boost"
    LOG_OUTPUT_ON_FAILURE TRUE
    LOG_CONFIGURE ON
    LOG_BUILD OFF
    LOG_INSTALL ON
    CONFIGURE_COMMAND  ""
    PATCH_COMMAND <SOURCE_DIR>/bootstrap.sh
    BUILD_COMMAND <SOURCE_DIR>/b2 headers
    BUILD_IN_SOURCE  TRUE
    INSTALL_COMMAND <SOURCE_DIR>/b2 "cxxflags=-fPIC -std=c++17" visibility=global runtime-link=static link=static toolset=clang threading=multi --build-type=minimal --with-thread --with-program_options --with-system --with-date_time --with-regex --with-chrono --with-atomic --with-random --with-filesystem --with-log  address-model=64 architecture=x86  variant=${BOOST_VARIANT}   --stagedir=stage/x64  --build-dir=${_BOOST_BUILD_ROOT}  --prefix=${_BOOST_BUILD_ROOT}   --libdir=${_BOOST_BUILD_ROOT}/lib install
    UPDATE_COMMAND ""
)

print("_BOOST_BUILD_ROOT: ${_BOOST_BUILD_ROOT}")
set(boost_DIR "${_BOOST_BUILD_ROOT}/lib/cmake/Boost-${BOOST_VERSION}")
print("boost_DIR : ${boost_DIR}")
set(_Boost_INCLUDE_DIR "${_BOOST_BUILD_ROOT}/include")
print("_Boost_INCLUDE_DIR : ${_Boost_INCLUDE_DIR}")
set(_BOOST_CACHE_ARGS
    -DBoost_DIR:PATH=${boost_DIR}
    -DBoost_USE_MULTITHREADED:BOOL=ON
    -DBoost_USE_STATIC_LIBS:BOOL=ON
    -DBoost_USE_STATIC_RUNTIME:BOOL=ON
    -DBoost_NO_SYSTEM_PATHS:BOOL=ON
    -DBoost_INCLUDE_DIR:PATH=${_Boost_INCLUDE_DIR}
)

# build openssl
set(_openssl_BUILD_ROOT "${CMAKE_CURRENT_BINARY_DIR}/openssl/build/${CMAKE_SYSTEM_NAME}")
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(OPENSSL_VARIANT "-d")
else()
    set(OPENSSL_VARIANT "")
endif()

ExternalProject_Add(openssl
    PREFIX openssl
    SOURCE_DIR  "${CMAKE_CURRENT_SOURCE_DIR}/../../../openssl"
    CONFIGURE_COMMAND  <SOURCE_DIR>/config ${OPENSSL_VARIANT} -fPIC --prefix=${_openssl_BUILD_ROOT} --openssldir=${_openssl_BUILD_ROOT}
    BUILD_COMMAND make build_libs
    BUILD_IN_SOURCE  FALSE
    INSTALL_COMMAND make install_dev
)
set(_OPENSSL_CACHE_ARGS
        -DOPENSSL_USE_STATIC_LIBS:BOOL=ON
        -DOPENSSL_ROOT_DIR:STRING=${_openssl_BUILD_ROOT}
        -DOPENSSL_INCLUDE_DIR:PATH=${_openssl_BUILD_ROOT}/include
        -DOPENSSL_LIBRARIES:PATH=${_openssl_BUILD_ROOT}/lib
    )
set(_OPENSSL_INCLUDE_DIR ${_openssl_BUILD_ROOT}/include)

# Builds abseil/absl
ExternalProject_Add(absl
        PREFIX absl
        SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../abseil-cpp"
        CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/absl
        -DCMAKE_CXX_STANDARD:STRING=17
        -DABSL_PROPAGATE_CXX_STD:BOOL=ON
        ${_CMAKE_COMMON_BUILD_PARAMS}
)

set(_FINDPACKAGE_ABSL_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/absl/lib/cmake/absl")
set(_FINDPACKAGE_ABSL_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/absl/lib")
set(_FINDPACKAGE_ABSL_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/absl/include")

## Builds grpc
ExternalProject_Add(grpc
  PREFIX grpc
  BINARY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../grpc/build"
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../grpc"
  CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/grpc
  CMAKE_CACHE_ARGS
        -DgRPC_INSTALL:BOOL=ON
        -DgRPC_BUILD_TESTS:BOOL=OFF
        -DABSL_ENABLE_INSTALL:BOOL=ON
        -DgRPC_SSL_PROVIDER:STRING=package
        -DCMAKE_CXX_STANDARD:STRING=17
        ${_OPENSSL_CACHE_ARGS}
        ${_CMAKE_COMMON_BUILD_PARAMS}
        ${_grpc_EXTRA_PARAM}
        ${grpc_patch}
  DEPENDS openssl absl
)

## Builds cares
ExternalProject_Add(cares
  PREFIX cares
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../c-ares"
  CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/cares
        -DCARES_STATIC:BOOL=ON
        -DCARES_SHARED:BOOL=OFF
        ${_CMAKE_COMMON_BUILD_PARAMS}
)

set(_FINDPACKAGE_CARES_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/cares/lib/cmake/c-ares")
set(_FINDPACKAGE_CARES_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/cares/lib")
set(_FINDPACKAGE_CARES_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/cares/include")

## Builds yaml-cpp
ExternalProject_Add(yaml-cpp
  PREFIX yaml-cpp
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../yaml-cpp"
  CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/yaml-cpp
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DYAML_BUILD_SHARED_LIBS:BOOL=OFF
        -DYAML_MSVC_SHARED_RT:BOOL=OFF
        ${_CMAKE_COMMON_BUILD_PARAMS}
)

set(_FINDPACKAGE_YAMLCPP_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/yaml-cpp/lib/cmake/yaml-cpp")
set(_FINDPACKAGE_YAMLCPP_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/yaml-cpp/lib")
set(_FINDPACKAGE_YAMLCPP_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/yaml-cpp/include")

## Builds sqlite3
ExternalProject_Add(sqlite3
  PREFIX sqlite3
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../sqlite3"
  CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/sqlite3
        ${_CMAKE_COMMON_BUILD_PARAMS}
)

set(_FINDPACKAGE_SQLITE3_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/sqlite3/lib/cmake/sqlite3")
set(_FINDPACKAGE_SQLITE3_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/sqlite3/lib")
set(_FINDPACKAGE_SQLITE3_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/sqlite3/include")

# --------------------------------------------------------
## Builds SQLiteModernCpp
ExternalProject_Add(SQLiteModernCpp
  PREFIX SQLiteModernCpp
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../libp2p-sqlite-modern-cpp"
  CMAKE_CACHE_ARGS
        -DHUNTER_ENABLED:BOOL=OFF
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/SQLiteModernCpp
        -Dsqlite3_DIR:PATH=${_FINDPACKAGE_SQLITE3_CONFIG_DIR}
        ${_CMAKE_COMMON_BUILD_PARAMS}
  DEPENDS sqlite3
)

set(_FINDPACKAGE_SQLITECPP_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/SQLiteModernCpp/lib/cmake/SQLiteModernCpp")
set(_FINDPACKAGE_SQLITECPP_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/SQLiteModernCpp/lib")
set(_FINDPACKAGE_SQLITECPP_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/SQLiteModernCpp/include")

# --------------------------------------------------------
## Builds soralog
ExternalProject_Add(soralog
  PREFIX soralog
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../soralog"
  CMAKE_CACHE_ARGS
        -DHUNTER_ENABLED:BOOL=OFF
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/soralog
        -DEXAMPLES:BOOL=OFF
        -DTESTING:BOOL=OFF
        -Dyaml-cpp_DIR:PATH=${_FINDPACKAGE_YAMLCPP_CONFIG_DIR}
        -Dfmt_DIR:PATH=${_FINDPACKAGE_FMT_CONFIG_DIR}
        ${_CMAKE_COMMON_BUILD_PARAMS}
        -DCMAKE_CXX_STANDARD:STRING=17
  DEPENDS fmt yaml-cpp
)

set(_FINDPACKAGE_SORALOG_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/soralog/lib/cmake/soralog")
set(_FINDPACKAGE_SORALOG_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/soralog/lib")
set(_FINDPACKAGE_SORALOG_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/soralog/include")

# Builds libp2p
ExternalProject_Add(libp2p
  PREFIX libp2p
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../libp2p"
  CMAKE_CACHE_ARGS
        -DGTest_DIR:PATH=${_FINDPACKAGE_GTEST_CONFIG_DIR}
        -DCMAKE_USE_OPENSSL:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/libp2p
        -DTESTING:BOOL=OFF
        -DEXPOSE_MOCKS:BOOL=ON
        -DHUNTER_ENABLED:BOOL=OFF
        -DBUILD_EXAMPLES:BOOL=${_libp2p_BUILD_EXAMPLES}
        -DEXAMPLES:BOOL=${_libp2p_BUILD_EXAMPLES}
        -DCMAKE_FIND_USE_PACKAGE_ROOT_PATH:BOOL=ON
        -DBoost_NO_SYSTEM_PATHS:BOOL=ON
        -DProtobuf_DIR:PATH=${_FINDPACKAGE_PROTOBUF_CONFIG_DIR}
        -DProtobuf_INCLUDE_DIR:PATH=${_FINDPACKAGE_PROTOBUF_INCLUDE_DIR}
        -DProtobuf_LIBRARIES:PATH=${_FINDPACKAGE_PROTOBUF_LIB_DIR}
        -DProtobuf_PROTOC_EXECUTABLE:PATH=${_PROTOBUF_PROTOC_EXEC}
        -Dspdlog_DIR:PATH=${_FINDPACKAGE_SPDLOG_CONFIG_DIR}
        -Dtsl_hat_trie_DIR:PATH=${_FINDPACKAGE_TSL_HAT_TRIE_CONFIG_DIR}
        -DBoost.DI_DIR:PATH=${_FINDPACKAGE_BOOST_DI_CONFIG_DIR}
        -Dc-ares_DIR:PATH=${_FINDPACKAGE_CARES_CONFIG_DIR}
        -Dfmt_DIR:PATH=${_FINDPACKAGE_FMT_CONFIG_DIR}
        -Dyaml-cpp_DIR:PATH=${_FINDPACKAGE_YAMLCPP_CONFIG_DIR}
        -Dsoralog_DIR:PATH=${_FINDPACKAGE_SORALOG_CONFIG_DIR}
        -DSQLiteModernCpp_DIR:PATH=${_FINDPACKAGE_SQLITECPP_CONFIG_DIR}
        -Dsqlite3_DIR:PATH=${_FINDPACKAGE_SQLITE3_CONFIG_DIR}
        ${_BOOST_CACHE_ARGS}
        ${_OPENSSL_CACHE_ARGS}
        ${_CMAKE_COMMON_BUILD_PARAMS}
        ${libp2p_EXTRA_PARAM}
        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}\ -I\ ${_Boost_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_GSL_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_SPDLOG_INCLUDE_DIR}\ -I\ ${_OPENSSL_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_PROTOBUF_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_TSL_HAT_TRIE_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_BOOST_DI_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_CARES_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_FMT_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_YAMLCPP_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_SORALOG_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_SQLITECPP_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_SQLITE3_INCLUDE_DIR}
        -DFORCE_MULTIPLE:BOOL=${_FORCE_MULTIPLE}
        -DMULTIPLE_OPTION:STRING=${MULTIPLE_OPTION}
        -DCMAKE_CXX_STANDARD:STRING=17
  DEPENDS GTest grpc ${_PROTOBUF_TARGET} spdlog tsl_hat_trie Boost.DI Microsoft.GSL Boost openssl cares fmt yaml-cpp SQLiteModernCpp soralog
)

set(_FINDPACKAGE_libp2p_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/libp2p/lib/cmake/libp2p")
set(_FINDPACKAGE_libp2p_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/libp2p/lib")
set(_FINDPACKAGE_LIBP2P_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/libp2p/include")


# Builds MNN
ExternalProject_Add(MNN
  PREFIX MNN
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../MNN"
  CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/MNN
        -DMNN_BUILD_CONVERTER:BOOL=ON
        -DMNN_BUILD_SHARED_LIBS:BOOL=ON
        -DMNN_SEP_BUILD:BOOL=ON
        ${_CMAKE_COMMON_BUILD_PARAMS}
)
add_library( libMNN SHARED IMPORTED )
set(_FINDPACKAGE_MNN_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/MNN/lib/cmake/mnn")
set(_FINDPACKAGE_MNN_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/MNN/lib")
set(_FINDPACKAGE_MNN_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/MNN/include")

# Builds ipfs-lite-cpp

ExternalProject_Add(ipfs-lite-cpp
  PREFIX ipfs-lite-cpp
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../ipfs-lite-cpp"
  BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/ipfs-lite-cpp"
#  INSTALL_COMMAND ""
  CMAKE_CACHE_ARGS
        -DProtobuf_DIR:PATH=${_FINDPACKAGE_PROTOBUF_CONFIG_DIR}
        ${_CMAKE_ARGS_OPENSSL_ROOT_DIR}
        -DGTest_DIR:PATH=${_FINDPACKAGE_GTEST_CONFIG_DIR}
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/ipfs-lite-cpp
        -DBOOST_ROOT:PATH="${BOOST_ROOT}"
        -DBOOST_INCLUDE_DIR:PATH="${BOOST_INCLUDE_DIR}"
        -DBOOST_LIBRARY_DIR:PATH="${BOOST_LIBRARY_DIR}"
        -Dspdlog_DIR:PATH=${_FINDPACKAGE_SPDLOG_CONFIG_DIR}
        -Dtsl_hat_trie_DIR:PATH=${_FINDPACKAGE_TSL_HAT_TRIE_CONFIG_DIR}
        -Dlibp2p_DIR:PATH=${_FINDPACKAGE_libp2p_CONFIG_DIR}
        -DProtobuf_DIR:PATH=${_FINDPACKAGE_PROTOBUF_CONFIG_DIR}
        -DProtobuf_INCLUDE_DIR:PATH=${_FINDPACKAGE_PROTOBUF_INCLUDE_DIR}
        -DProtobuf_LIBRARIES:PATH=${_FINDPACKAGE_PROTOBUF_LIB_DIR}
        -Drocksdb_DIR:PATH=${_FINDPACKAGE_ROCKSDB_DIR}
        -DTESTING:BOOL=${TESTING}
        -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}\ -I\ ${BOOST_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_GSL_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_SPDLOG_INCLUDE_DIR}\ -I\ \\\"${OPENSSL_ROOT_DIR}/include\\\"\ -I\ ${_FINDPACKAGE_PROTOBUF_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_BOOST_DI_INCLUDE_DIR}
        -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}
        -DCMAKE_CXX_FLAGS_RELEASE:STRING=${CMAKE_CXX_FLAGS_RELEASE}
        -DCMAKE_C_FLAGS_RELEASE:STRING=${CMAKE_C_FLAGS_RELEASE}
        -DCMAKE_CXX_FLAGS_DEBUG:STRING=${CMAKE_CXX_FLAGS_DEBUG}
        -DCMAKE_C_FLAGS_DEBUG:STRING=${CMAKE_C_FLAGS_DEBUG}
        -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
  DEPENDS GTest Microsoft.GSL spdlog tsl_hat_trie libp2p ${_PROTOBUF_TARGET} rocksdb Boost.DI MNN Boost
)
# TARGET_LINK_LIBRARIES(GLBall libMNN)

